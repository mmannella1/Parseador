{"version":3,"sources":["Componentes/Header.js","Componentes/Trash.js","Componentes/Helper.js","Componentes/Formulario.js","Componentes/Resultado.js","Componentes/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorHeader","styled","header","Header","titulo","Trash","className","BuscarText","trama","Input","cuenta","posicion","indexOf","console","log","Label","label","ButtonBlack","button","Error","div","Select","select","Parrafo","p","ParrafoTop","TextoArea","textarea","Formulario","guardarResumen","guardarMostrar","guardarSpinner","useState","error","guardarError","trash","guardarTrash","buscarText","cantBusqueda","Buscar","guardarbuscarText","separador","datos","guardarDatos","Largo","guardarLargo","obtenerInformacion","e","target","value","name","onSubmit","preventDefault","trim","setTimeout","length","onChange","placeholder","type","onClick","TablaHtml","table","Throw","th","Tdrow","td","props","Trow","tr","Resultado","Resumen","Campos","Mostrar","ResultadoTrama","separa","split","separadorAux","ultimoCaracter","substr","Cortar","map","campo","index","key","shortid","generate","Spinner","App","MostrarSp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.68beb4c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ContenedorHeader = styled.header`\r\n/*background-color: #26c6DA;*/\r\npadding:10px;\r\nwidth:70%;\r\nfont-weight:bold;\r\ncolor:#FFFFFF;\r\nmargin:auto;\r\n\r\n`;\r\n\r\nconst Header = ({titulo}) => {\r\n    return (\r\n        <ContenedorHeader>\r\n           <h1>{titulo}</h1>\r\n        </ContenedorHeader>\r\n      );\r\n}\r\n \r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Trash.css';\r\n\r\nconst Trash = () => {\r\n    return ( \r\n\r\n\r\n<div className=\"sk-cube-grid\">\r\n  <div className=\"sk-cube sk-cube1\"></div>\r\n  <div className=\"sk-cube sk-cube2\"></div>\r\n  <div className=\"sk-cube sk-cube3\"></div>\r\n  <div className=\"sk-cube sk-cube4\"></div>\r\n  <div className=\"sk-cube sk-cube5\"></div>\r\n  <div className=\"sk-cube sk-cube6\"></div>\r\n  <div className=\"sk-cube sk-cube7\"></div>\r\n  <div className=\"sk-cube sk-cube8\"></div>\r\n  <div className=\"sk-cube sk-cube9\"></div>\r\n</div>\r\n    );\r\n}\r\nexport default Trash;","\r\n\r\nexport function Cortar ({Resumen}) {\r\n\r\nconsole.log(\"Resumen helper\" + Resumen)\r\n\r\nconst {trama, separador} = Resumen.datos;\r\nvar indice;\r\n\r\n//divido la trama en 2 partes antes de DH(0) y despues de DH (1)\r\nconst separa = trama.split('DH')\r\n\r\nif (separa.length === 1) {\r\n    indice = 0\r\n}else {\r\n    indice = 1\r\n}\r\n\r\n\r\nconst separadorAux = separador +']'\r\n\r\n\r\n//divido la trama en 2 partes antes de ](0) y despues de ] (1)\r\nconst ultimoCaracter = separa[indice].split(separadorAux)\r\n\r\n\r\nif (ultimoCaracter.length === 2 || 1) {\r\n    indice = 0\r\n}else {\r\n    indice = 1\r\n}\r\n\r\n//me quedo con la trama corregida y la convierte en un array por el caracter separador\r\nconst miArray = ultimoCaracter[indice].substr(1).split(separador)\r\n\r\n\r\n    return miArray;\r\n}\r\n\r\n\r\nexport function BuscarText ({trama}, {Input}) {\r\n\r\n//const Salida = trama.indexOf(Input,0)\r\nlet cuenta = 0;\r\nvar posicion = trama.indexOf(Input);\r\nwhile ( posicion !== -1 ) {\r\n   cuenta++;\r\n   posicion = trama.indexOf(Input,posicion+1);\r\n}\r\n\r\nconsole.log(\"veces que aparece\" + cuenta)\r\nreturn cuenta\r\n}","import React, {useState, Fragment} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Header from '../Componentes/Header';\r\nimport Trash from '../Componentes/Trash';\r\nimport {BuscarText} from './Helper';\r\n\r\n\r\nconst Label = styled.label`\r\n    flex: 0 0 100px;\r\n    color: #FFFFFF;\r\n   /* background-color:black;*/\r\n    padding: 5px;\r\n    display: -webkit-inline-box;\r\n\r\n    \r\n`;\r\nconst ButtonBlack = styled.button`\r\n    background-color: black;\r\n    border-color: #3a3679;\r\n    color: white;\r\n\r\n&:hover {\r\n  background-color: grey;\r\n  border-color: white;\r\n  color: white;\r\n}\r\n\r\n` \r\n\r\n \r\n\r\nconst Error = styled.div`\r\n    background: linear-gradient(to right, red,   #0e0a69d5); \r\n    color: white;\r\n    padding: 10px;\r\n    width:24%;\r\n    text-align: center;\r\n    margin: auto;\r\n    margin-bottom: 2rem;\r\n`;\r\nconst Select = styled.select`\r\n    /*color: revert;*/\r\n    border-block-end-style: revert;\r\n    border-radius: 7px;\r\n    padding: 1px;\r\n   /* border-color: darkgray;*/\r\n   background: linear-gradient(to right, #0e0720be,  #2c186457, #0e0a69d5); \r\n    background-color: darkslateblue;\r\n    color: floralwhite;\r\n    text-align-last:center;\r\n`;\r\n\r\n\r\nconst Parrafo = styled.p`\r\n    display: contents;\r\n    padding: 10rem;\r\n    color:#5d97ff;;\r\n\r\n`\r\nconst ParrafoTop = styled.p`\r\n    display: flex;\r\n    padding-bottom: 0px;\r\n    margin:0px;\r\n\r\n    color:#5d97ff;;\r\n\r\n`\r\nconst TextoArea = styled.textarea`\r\n     margin: 0px;\r\n    width: 759px;\r\n    height: 123px;\r\n    font-size: smaller;\r\n    font-family: monospace;\r\n`;\r\nconst Formulario = ({guardarResumen, guardarMostrar, guardarSpinner}) => {\r\n  \r\n  //error de carga de datos  \r\n  const [ error, guardarError ] = useState(false);\r\n  const [ trash, guardarTrash ] = useState(false);\r\n  //mostrar Buscar\r\n  const [ Buscar, guardarbuscarText ] = useState({\r\n          buscarText:false,\r\n          cantBusqueda:0\r\n\r\n  });\r\n\r\nconst {buscarText, cantBusqueda} = Buscar\r\n  //contiene la estructura de datos  \r\n  const [ datos, guardarDatos ] = useState({\r\n    separador: '',\r\n    trama: '',\r\n    Input:''\r\n    \r\n});\r\n//extraigo los datos para tratarlos en el form  \r\nconst { separador, trama, Input } = datos;\r\nconst[Largo, guardarLargo]=useState(0);\r\n\r\n\r\n\r\n//extrago datos de los componentes\r\nconst obtenerInformacion = e => {\r\n    console.log(e.target.value)\r\n    guardarDatos({\r\n        ...datos,\r\n        [e.target.name] : e.target.value\r\n        \r\n    })\r\n    \r\n}\r\n\r\nconst LimpiarObj = e => {\r\n    \r\n    \r\n    guardarTrash(true)\r\n    setTimeout(() => {\r\n        // Elimina el spinner       \r\n        guardarTrash(false)\r\n        guardarDatos({\r\n            ...datos,\r\n            separador:'',\r\n            trama:'',\r\n            Input:''\r\n        })\r\n    \r\n        guardarbuscarText({\r\n            ...Buscar,\r\n            buscarText:false,\r\n            cantBusqueda:0\r\n        })\r\n        guardarLargo(0);\r\n        guardarMostrar(false);\r\n        guardarError(false);\r\n        },1000)\r\n   \r\n   \r\n   \r\n\r\n}\r\n//submite \r\n  const _handleSubmit = (e) => {\r\n     e.preventDefault();\r\n     if(separador.trim() === '' || trama.trim() === '') {\r\n    \r\n        guardarError(true);\r\n        guardarMostrar(false)\r\n    \r\n\r\n        return;\r\n      } else {\r\n       \r\n        guardarError(false);\r\n        guardarSpinner(true)\r\n     \r\n         setTimeout(() => {\r\n            // Elimina el spinner       \r\n            guardarSpinner(false)\r\n            // pasa la información al componente principal\r\n            guardarResumen({\r\n                datos\r\n             });     \r\n             guardarMostrar(true)\r\n             guardarLargo(trama.length)\r\n            },1000)\r\n           \r\n        \r\n             }\r\n}\r\n\r\nconst buscarDato = e => {\r\n    console.log(\"Buscar\" + Input)\r\n    if (Input !== \"\") { \r\n    guardarbuscarText({\r\n        ...Buscar,\r\n       cantBusqueda:BuscarText({trama}, {Input}),\r\n       buscarText:true\r\n    })\r\n    }else {\r\n    guardarError(true);\r\n    console.log(\"Buscar vacio\")\r\n}\r\n   \r\n}\r\n\r\n    return (\r\n        <Fragment>\r\n            <ParrafoTop>MAM 2020</ParrafoTop>\r\n             <form onSubmit={_handleSubmit}>\r\n               <div>\r\n               <Header titulo=\"Parseador de tramas\"/>\r\n               \r\n               { error ? <Error>Tenes que ingresar datos para procesar</Error>  : null }   \r\n               <Parrafo>Recorda que solo puede parsear una trama x vez</Parrafo> \r\n              \r\n               <div>           \r\n              \r\n               <Label>Ingresa el caracter separador</Label>\r\n               <Select\r\n                name=\"separador\"\r\n                value={separador}\r\n                onChange={obtenerInformacion}\r\n               \r\n               >  \r\n                   <option value=\"\">--Seleccione--</option>\r\n                   <option value=\"õ\">õ</option>\r\n                   <option value=\"§\">§</option>\r\n                   <option value=\"£\">£</option>\r\n                   <option value=\"#\">#</option>\r\n                   <option value=\"|\">|</option>\r\n                   <option value=\";\">;</option>\r\n                   <option value=\",\">,</option>\r\n             \r\n            \r\n               </Select>\r\n             \r\n               </div>\r\n               <div>\r\n               <TextoArea \r\n                    name=\"trama\"\r\n                    value={trama}\r\n                    onChange={obtenerInformacion}\r\n                    placeholder=\"Pega la trama o txt a trabajar\">{trama}</TextoArea>\r\n               </div>\r\n               <div>\r\n                   <ButtonBlack type=\"submit\">Convertir</ButtonBlack>\r\n                  \r\n                    <ButtonBlack \r\n                        onClick={LimpiarObj}\r\n                        type=\"button\">Limpiar</ButtonBlack>\r\n                    <ButtonBlack \r\n                        onClick={buscarDato}\r\n                        type=\"button\"\r\n                        >Buscar</ButtonBlack>\r\n                   <input type=\"text\" \r\n                        onChange={obtenerInformacion}\r\n                        name=\"Input\"\r\n                        placeholder=\"ingresa el texto a buscar\"\r\n                        value={Input}/>   \r\n                   <div>\r\n                   {(trash) ? <Trash/> : null} \r\n                       \r\n                        {(!buscarText) ? null :\r\n                            <Label>El texto aparece {cantBusqueda} veces</Label>\r\n                        }\r\n                       \r\n                   </div>\r\n               \r\n               </div>\r\n             \r\n               {(Largo === 0) ? null :\r\n               <Label>Tamaño de la trama {Largo} caracteres</Label>\r\n               }\r\n               </div>\r\n            </form>\r\n            \r\n            </Fragment>\r\n      );\r\n}\r\n \r\nexport default Formulario;\r\n\r\n/*\r\n <button \r\n                     onClick={BuscarDato}\r\n                      type=\"button\">Buscar</button>\r\n\r\n\r\n <button \r\n                   \r\n                   onClick={LimpiarObj}\r\n                   type=\"button\">Limpiar</button>\r\n                      */","import React,{Fragment} from 'react';\r\nimport {Cortar} from './Helper';\r\nimport styled from '@emotion/styled';\r\nimport shortid from \"shortid\";\r\n\r\n\r\nconst Label = styled.label`\r\n    flex: 0 0 100px;\r\n    color: #FFFFFF;\r\n   /* background-color:black;*/\r\n    padding: 5px;\r\n    display: -webkit-inline-box;\r\n\r\n    \r\n`;\r\n\r\nconst TablaHtml = styled.table`\r\n \r\n  background: -webkit-linear-gradient(to right, #8d77c9, #0702589d);  /* Chrome 10-25, Safari 5.1-6 */\r\n  background: linear-gradient(to right, #0e0720be,  #0e0720be, #0e0a69d5); \r\n  font-family: Arial, Helvetica, sans-serif;\r\n  display: table;\r\n  margin: auto;\r\n  border-style: inset;\r\n`\r\nconst Throw = styled.th`\r\n   border-style: inset;\r\n   color:red;\r\n` \r\n\r\nconst Tdrow = styled.td`\r\nborder-style: inset;\r\nbackground: ${props => ( (props.value === 0 ) ? 'linear-gradient(to right, #0e0720be,  #0e0720be, #0e0a69d5)'\r\n                                              : 'linear-gradient(to left, #0e0720be,  #0e0720be, #0e0a69d5)'  )};\r\ncolor:#FFF;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n`\r\n\r\nconst Trow = styled.tr`\r\n  overflow-y: scroll;\r\n  scroll-behavior: smooth;\r\n` \r\n\r\nconst Resultado = ({Resumen, Mostrar}) => {\r\n\r\nlet Campos=0;\r\n//Evaluo si mustro salida\r\nif (Mostrar) {\r\n\r\n    \r\n     const ResultadoTrama = Cortar({Resumen})\r\n     Campos = ResultadoTrama.length\r\n      \r\n     return (\r\n        <Fragment>\r\n        <Label>La trama Contine {Campos} Campos</Label>\r\n       <TablaHtml> \r\n       <thead >\r\n          <tr>\r\n            <Throw>Id Campo</Throw>  \r\n            <Throw>Contenido</Throw>  \r\n            <Throw>Largo</Throw> \r\n         </tr>\r\n       </thead>\r\n\r\n       <tbody >\r\n            \r\n       {ResultadoTrama.map((campo, index) =>\r\n         \r\n           <Trow key={shortid.generate()}>\r\n               <Tdrow value={(index  % 2)}>{index + 1}</Tdrow>\r\n               <Tdrow value={(index  % 2)}>{campo}</Tdrow>\r\n               <Tdrow value={(index  % 2)}>{campo.length}</Tdrow> \r\n            </Trow>\r\n          )}\r\n        \r\n        </tbody>\r\n        </TablaHtml>\r\n    </Fragment>) \r\n     \r\n         \r\n\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n \r\nexport default Resultado;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n\r\n        <div className=\"sk-circle\">\r\n            <div className=\"sk-circle1 sk-child\"></div>\r\n            <div className=\"sk-circle2 sk-child\"></div>\r\n            <div className=\"sk-circle3 sk-child\"></div>\r\n            <div className=\"sk-circle4 sk-child\"></div>\r\n            <div className=\"sk-circle5 sk-child\"></div>\r\n            <div className=\"sk-circle6 sk-child\"></div>\r\n            <div className=\"sk-circle7 sk-child\"></div>\r\n            <div className=\"sk-circle8 sk-child\"></div>\r\n            <div className=\"sk-circle9 sk-child\"></div>\r\n            <div className=\"sk-circle10 sk-child\"></div>\r\n            <div className=\"sk-circle11 sk-child\"></div>\r\n            <div className=\"sk-circle12 sk-child\"></div>\r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, {useState} from 'react';\r\nimport './App.css';\r\n//import 'bulma/css/bulma.css';\r\nimport Formulario from './Componentes/Formulario';\r\nimport Resultado from './Componentes/Resultado';\r\nimport Spinner from './Componentes/Spinner';\r\n\r\nfunction App() {\r\n\r\n  //contiene la estructura de datos  \r\n  const [ Resumen, guardarResumen ] = useState({\r\n    separador:'',\r\n    trama:''\r\n  });\r\n\r\n    //contiene la estructura de datos  \r\n    const [ Mostrar, guardarMostrar ] = useState(false);\r\n    const [ MostrarSp, guardarSpinner ] = useState(false);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div>\r\n          <Formulario\r\n            guardarResumen={guardarResumen}\r\n            guardarMostrar={guardarMostrar}\r\n            guardarSpinner={guardarSpinner}/>\r\n        </div>\r\n      <div>\r\n      { MostrarSp ? <Spinner /> : null }\r\n          {(Mostrar )?  \r\n          <Resultado\r\n            Resumen={Resumen}\r\n            Mostrar={Mostrar}/>  \r\n            : null}\r\n          \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}